package types

import (
	"fmt"
	"strings"

	badger "github.com/dgraph-io/badger/v2"
	proto "github.com/golang/protobuf/proto"
	cid "github.com/ipfs/go-cid"
	ld "github.com/piprate/json-gold/ld"
)

// GetValue satisfies the HasValue interface for index values by returning the index Id.
// The Index struct is generated by protobuf.
func (index *Index) GetValue(_ interface{}) uint64 {
	return index.GetId()
}

// Increment the counter at the given position
func (index *Index) Increment(place uint8) {
	if place == 0 {
		index.Subject++
	} else if place == 1 {
		index.Predicate++
	} else if place == 2 {
		index.Object++
	}
}

// Get the counter at the given position
func (index *Index) Get(place uint8) uint64 {
	if place == 0 {
		return index.GetSubject()
	} else if place == 1 {
		return index.GetPredicate()
	} else if place == 2 {
		return index.GetObject()
	} else {
		return 0
	}
}

// An IndexMap associates marshalled string values with the
// Index structs that have already been read from the database.
// The Index struct is generated by protobuf.
type IndexMap map[string]*Index

// GetIndex memoizes database lookup for RDF nodes.
func (indexMap IndexMap) GetIndex(node ld.Node, txn *badger.Txn) (*Index, error) {
	value := MarshalNode(nil, node)
	if index, hasIndex := indexMap[value]; hasIndex {
		return index, nil
	}

	indexKey := make([]byte, 1, 1+len(value))
	indexKey[0] = IndexPrefix
	indexKey = append(indexKey, []byte(value)...)
	item, err := txn.Get(indexKey)
	if err != nil {
		return nil, err
	}
	indexValue, err := item.ValueCopy(nil)
	if err != nil {
		return nil, err
	}
	index := &Index{}
	err = proto.Unmarshal(indexValue, index)
	if err != nil {
		return nil, err
	}
	indexMap[value] = index
	return index, nil
}

// A ValueMap associates uint64 ids with a value.
// The Value struct is generated by protobuf.
type ValueMap map[uint64]*Value

// MarshalNode serializes an ld.Node into a string
func MarshalNode(origin *cid.Cid, node ld.Node) string {
	if iri, isIRI := node.(*ld.IRI); isIRI {
		return "<" + escape(iri.Value) + ">"
	} else if blank, isBlank := node.(*ld.BlankNode); isBlank {
		return marshalBlank(origin, blank.Attribute)
	} else if literal, isLiteral := node.(*ld.Literal); isLiteral {
		return marshalLiteral(literal.Value, literal.Datatype, literal.Language)
	}
	return ""
}

func marshalBlank(origin *cid.Cid, id string) string {
	if origin == nil {
		return ""
	}
	return fmt.Sprintf("<ul:/ipfs/%s#%s>", origin.String(), id)
}

func marshalLiteral(value, datatype, language string) string {
	result := escape(value)
	if datatype == ld.RDFLangString {
		result += "@" + language
	} else if datatype != ld.XSDString {
		result += "^^<" + escape(datatype) + ">"
	}
	return result
}

func escape(str string) string {
	str = strings.Replace(str, "\\", "\\\\", -1)
	str = strings.Replace(str, "\"", "\\\"", -1)
	str = strings.Replace(str, "\n", "\\n", -1)
	str = strings.Replace(str, "\r", "\\r", -1)
	str = strings.Replace(str, "\t", "\\t", -1)
	return str
}

// AssembleKey will look at the prefix byte to determine
// how many of the elements {abc} to pack into the key.
// This is important because we ofter deliberately "short"
// a key so to make an iteration prefix.
func AssembleKey(prefix byte, a, b, c []byte) []byte {
	A, B, C := len(a), len(b), len(c)
	keySize := 1 + A + B + C
	key := make([]byte, keySize)
	key[0] = prefix
	if A > 0 {
		copy(key[1:1+A], a)
		if B > 0 {
			copy(key[1+A:1+A+B], b)
			if C > 0 {
				copy(key[1+A+B:1+A+B+C], c)
			}
		}
	}
	return key
}

// Sources is a slice of Source structs
type Sources []*Source

func (sources Sources) String() string {
	s := "["
	for i, source := range sources {
		if i > 0 {
			s += ", "
		}
		s += source.toCompactString()
	}
	return s + "]"
}

func (source *Source) toCompactString() string {
	c, _ := cid.Parse(source.Cid)
	return fmt.Sprintf("%s#%s[%d]", c.String(), source.Graph, source.Index)
}
